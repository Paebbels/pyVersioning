name: Test and Coverage

on: [ push ]

jobs:
  Test:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        python-version: [ 3.7, 3.8, 3.9 ]

    env:
      PYTHON: ${{ matrix.python-version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements.txt

#      - name: Run unit tests
#        run: |
#          python -m pytest -rA --cov=.. --cov-config=tests/.coveragerc tests/unit

  Coverage:
    name: Collect Coverage Data
    runs-on: ubuntu-latest
    env:
      PYTHON: 3.9
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Python ${{ env.PYTHON }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements.txt

#      - name: Collect coverage
#        if: ${{ always() }}
#        run: |
#          python -m pytest -rA --cov=.. --cov-config=tests/.coveragerc tests/unit
#
#      - name: Convert to cobertura format
#        if: ${{ always() }}
#        run: |
#          coverage xml
#
#      - name: Publish coverage at CodeCov
#        if: ${{ always() }}
#        uses: codecov/codecov-action@v1
#        with:
#          file: ./coverage.xml
#          flags: unittests
#          env_vars: PYTHON
#
#      - name: Publish coverage at Codacy
#        if: ${{ always() }}
#        uses: codacy/codacy-coverage-reporter-action@master
#        with:
#          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
#          coverage-reports: ./coverage.xml

  Build:
    name: Package
    needs: [ Test, Coverage ]
    runs-on: ubuntu-latest
    env:
      PYTHON: 3.9
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Python ${{ env.PYTHON }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON }}

      - name: Install dependencies for packaging and release
        run: |
          python -m pip install --upgrade pip
          pip install wheel

      - name: Build Python package (source distribution)
        run: |
          python setup.py sdist

      - name: Build Python package (binary distribution - wheel)
        run: |
          python setup.py bdist_wheel

      - name: Artifact upload (Sources)
        uses: actions/upload-artifact@v2
        with:
          name: source-packages
          path: |
            dist/*.tar.gz
          retention-days: 1

      - name: Artifact upload (Wheel)
        uses: actions/upload-artifact@v2
        with:
          name: wheel-packages
          path: |
            dist/*.whl
          retention-days: 1

  Execute:
    name: Execute
    needs: [ Build ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        python-version: [ 3.7, 3.8, 3.9 ]

    env:
      PYTHON: ${{ matrix.python-version }}
    steps:
      - name: Download artifact (Wheel)
        uses: actions/download-artifact@v2
        with:
          name: wheel-packages

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install package
        run: |
          pip install dist/*.whl

      - name: Execute 'help' command
        run: |
          pyVersioning help

  Release:
    name: Publish to PyPI
    needs: [ Test, Coverage, Build, Execute ]
    runs-on: ubuntu-latest
    env:
      PYTHON: 3.9
    steps:
      - name: Download artifact (Sources)
        uses: actions/download-artifact@v2
        with:
          name: source-packages

      - name: Download artifact (Wheel)
        uses: actions/download-artifact@v2
        with:
          name: wheel-packages

      - name: Setup Python ${{ env.PYTHON }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON }}

      - name: Install dependencies for packaging and release
        run: |
          python -m pip install --upgrade pip
          pip install twine

      - name: Release Python package to PyPI
#        if: startsWith(github.ref, 'refs/tags')
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine upload dist/*
